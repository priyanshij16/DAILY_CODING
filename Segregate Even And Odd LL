Segregate Even And Odd Nodes In a Linked List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
    // 1 2 3 4 5 >> 1 3 5 2 4   
    if(!head || !head->next || !head->next->next)
    return head;
     ListNode* odd= head;
      ListNode*even= head->next;
       ListNode*connect= head->next;
 
 while(odd->next && even->next){
           odd->next= even->next;
           even->next=odd->next->next;
           odd=odd->next;
           even= even->next;

       }
       odd->next= connect;
       return head;

    }
};
