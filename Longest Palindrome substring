1811. Longest Palindrome substring

ex: aaaabbaa o/p: aabbaa
 BRUTE APPROACH :O(N3)

bool check(i,j,s)
{
 while(i<j){
if(s[i]!= s[j])
{
  return false;
}
s++,j--;
}
}

 main(){
int start_i=0, maxlen=0;
 for(int i=0;i<n;i++)
for(int j=i;j<n;j++)
 if(check(i,j,s))
  if(j-i+1 >maxlen)
{
  maxlen= j-i+1;
 starti=i;
}
}

## APPROACH 2:  DYNAMIC PROGRAMMING :


class Solution {
private: 
 bool solve(vector<vector<bool>> &dp, int i, int j, string &s){
        if(i == j){
            return dp[i][j] = true;
        }
        if(j-i == 1){
            if(s[i] == s[j]){
                return dp[i][j] = true;
            }
            else{
                return dp[i][j] = false;
            }
        }
        if(s[i] == s[j] && dp[i+1][j-1] == true){
            return dp[i][j] = true;
        } else {
            return dp[i][j] = false;
        }
    }
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int startIndex = 0; int maxlen = 0;
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        for(int g=0; g<n; g++){
            for(int i=0, j=g; j<n; i++, j++){
                solve(dp, i, j, s);
                if(dp[i][j] == true){
                  
                    if(j-i+1 > maxlen){
                        startIndex = i;
                        maxlen = j-i+1;
                    }
                }
            }
        }
        return s.substr(startIndex, maxlen);
    }
};

